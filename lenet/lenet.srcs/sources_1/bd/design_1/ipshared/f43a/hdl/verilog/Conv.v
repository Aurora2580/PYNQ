// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=18,HLS_SYN_FF=3738,HLS_SYN_LUT=4339}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_state17 = 71'd65536;
parameter    ap_ST_fsm_state18 = 71'd131072;
parameter    ap_ST_fsm_state19 = 71'd262144;
parameter    ap_ST_fsm_state20 = 71'd524288;
parameter    ap_ST_fsm_state21 = 71'd1048576;
parameter    ap_ST_fsm_state22 = 71'd2097152;
parameter    ap_ST_fsm_state23 = 71'd4194304;
parameter    ap_ST_fsm_state24 = 71'd8388608;
parameter    ap_ST_fsm_state25 = 71'd16777216;
parameter    ap_ST_fsm_state26 = 71'd33554432;
parameter    ap_ST_fsm_state27 = 71'd67108864;
parameter    ap_ST_fsm_state28 = 71'd134217728;
parameter    ap_ST_fsm_state29 = 71'd268435456;
parameter    ap_ST_fsm_state30 = 71'd536870912;
parameter    ap_ST_fsm_state31 = 71'd1073741824;
parameter    ap_ST_fsm_state32 = 71'd2147483648;
parameter    ap_ST_fsm_state33 = 71'd4294967296;
parameter    ap_ST_fsm_state34 = 71'd8589934592;
parameter    ap_ST_fsm_state35 = 71'd17179869184;
parameter    ap_ST_fsm_state36 = 71'd34359738368;
parameter    ap_ST_fsm_state37 = 71'd68719476736;
parameter    ap_ST_fsm_state38 = 71'd137438953472;
parameter    ap_ST_fsm_state39 = 71'd274877906944;
parameter    ap_ST_fsm_state40 = 71'd549755813888;
parameter    ap_ST_fsm_state41 = 71'd1099511627776;
parameter    ap_ST_fsm_state42 = 71'd2199023255552;
parameter    ap_ST_fsm_state43 = 71'd4398046511104;
parameter    ap_ST_fsm_state44 = 71'd8796093022208;
parameter    ap_ST_fsm_state45 = 71'd17592186044416;
parameter    ap_ST_fsm_state46 = 71'd35184372088832;
parameter    ap_ST_fsm_state47 = 71'd70368744177664;
parameter    ap_ST_fsm_state48 = 71'd140737488355328;
parameter    ap_ST_fsm_state49 = 71'd281474976710656;
parameter    ap_ST_fsm_state50 = 71'd562949953421312;
parameter    ap_ST_fsm_state51 = 71'd1125899906842624;
parameter    ap_ST_fsm_state52 = 71'd2251799813685248;
parameter    ap_ST_fsm_state53 = 71'd4503599627370496;
parameter    ap_ST_fsm_state54 = 71'd9007199254740992;
parameter    ap_ST_fsm_state55 = 71'd18014398509481984;
parameter    ap_ST_fsm_state56 = 71'd36028797018963968;
parameter    ap_ST_fsm_state57 = 71'd72057594037927936;
parameter    ap_ST_fsm_state58 = 71'd144115188075855872;
parameter    ap_ST_fsm_state59 = 71'd288230376151711744;
parameter    ap_ST_fsm_state60 = 71'd576460752303423488;
parameter    ap_ST_fsm_state61 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 71'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 71'd1180591620717411303424;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] W;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond3_fu_910_p2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state65;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state66;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state71;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [0:0] relu_en_V_read_reg_1211;
reg   [7:0] Sy_V_read_reg_1216;
reg   [7:0] Sx_V_read_reg_1222;
reg   [7:0] Ky_V_read_reg_1228;
reg   [7:0] Kx_V_read_reg_1234;
reg   [15:0] CHout_V_read_reg_1241;
reg   [15:0] Win_V_read_reg_1248;
reg   [15:0] Hin_V_read_reg_1254;
reg   [15:0] CHin_V_read_reg_1259;
reg   [29:0] tmp_1_reg_1266;
reg   [29:0] tmp_2_reg_1271;
reg   [29:0] tmp_4_reg_1276;
reg   [29:0] tmp_5_reg_1281;
wire   [7:0] p_1_fu_638_p3;
reg   [7:0] p_1_reg_1286;
wire   [7:0] p_2_fu_646_p3;
reg   [7:0] p_2_reg_1292;
wire   [16:0] lhs_V_2_cast_fu_665_p1;
reg   [16:0] lhs_V_2_cast_reg_1298;
wire    ap_CS_fsm_state2;
wire   [16:0] lhs_V_4_cast_fu_711_p1;
reg   [16:0] lhs_V_4_cast_reg_1313;
wire   [48:0] tmp_2_cast1_fu_746_p1;
reg   [48:0] tmp_2_cast1_reg_1328;
wire    ap_CS_fsm_state24;
wire   [30:0] tmp_8_cast_fu_749_p1;
reg   [30:0] tmp_8_cast_reg_1333;
wire   [48:0] tmp_13_cast_fu_752_p1;
reg   [48:0] tmp_13_cast_reg_1338;
wire   [47:0] tmp_16_cast_fu_755_p1;
reg   [47:0] tmp_16_cast_reg_1343;
wire   [15:0] Wout_V_fu_762_p2;
reg   [15:0] Wout_V_reg_1348;
wire   [15:0] tmp_7_fu_772_p2;
reg   [15:0] tmp_7_reg_1353;
wire   [15:0] tmp_9_fu_778_p1;
reg   [15:0] tmp_9_reg_1358;
wire   [15:0] tmp_s_fu_781_p1;
reg   [15:0] tmp_s_reg_1363;
wire   [15:0] tmp_10_fu_784_p1;
reg   [15:0] tmp_10_reg_1368;
wire   [15:0] tmp_11_fu_787_p1;
reg   [15:0] tmp_11_reg_1373;
wire   [31:0] rhs_V_1_fu_790_p1;
reg   [31:0] rhs_V_1_reg_1378;
wire   [47:0] rhs_V_2_fu_793_p1;
reg   [47:0] rhs_V_2_reg_1385;
wire   [15:0] rhs_V_1_cast_fu_796_p1;
reg   [15:0] rhs_V_1_cast_reg_1390;
wire   [47:0] rhs_V_8_cast_fu_799_p1;
reg   [47:0] rhs_V_8_cast_reg_1395;
wire   [23:0] rhs_V_10_cast_fu_802_p1;
reg   [23:0] rhs_V_10_cast_reg_1401;
wire   [31:0] rhs_V_9_cast_fu_805_p1;
reg   [31:0] rhs_V_9_cast_reg_1406;
wire   [31:0] rhs_V_7_cast_fu_808_p1;
reg   [31:0] rhs_V_7_cast_reg_1412;
wire   [15:0] cout_fu_817_p2;
reg   [15:0] cout_reg_1420;
wire    ap_CS_fsm_state25;
wire   [31:0] tmp_17_cast_fu_827_p1;
reg   [31:0] tmp_17_cast_reg_1425;
wire   [0:0] exitcond1_fu_812_p2;
reg   [31:0] gmem_addr_reg_1431;
wire   [15:0] next_mul1_fu_846_p2;
reg   [15:0] next_mul1_reg_1437;
wire    ap_CS_fsm_state26;
wire   [15:0] i_fu_860_p2;
reg   [15:0] i_reg_1445;
wire   [15:0] tmp_20_fu_866_p2;
reg   [15:0] tmp_20_reg_1450;
wire   [0:0] exitcond2_fu_855_p2;
wire   [31:0] r_V_5_fu_1190_p2;
reg   [31:0] r_V_5_reg_1455;
wire   [47:0] r_V_1_fu_874_p2;
reg   [47:0] r_V_1_reg_1460;
wire    ap_CS_fsm_state27;
wire   [15:0] next_mul2_fu_879_p2;
reg   [15:0] next_mul2_reg_1465;
wire    ap_CS_fsm_state28;
wire   [31:0] next_mul3_fu_884_p2;
reg   [31:0] next_mul3_reg_1470;
wire   [15:0] j_fu_894_p2;
reg   [15:0] j_reg_1478;
wire   [15:0] tmp_22_fu_900_p2;
reg   [15:0] tmp_22_reg_1483;
wire   [0:0] exitcond_fu_889_p2;
wire   [15:0] next_mul4_fu_905_p2;
reg   [15:0] next_mul4_reg_1488;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state29_io;
wire   [7:0] ii_fu_915_p2;
reg   [7:0] ii_reg_1496;
wire  signed [15:0] h_V_fu_925_p2;
reg   [15:0] h_V_reg_1501;
wire  signed [31:0] r_V_14_fu_1195_p2;
reg  signed [31:0] r_V_14_reg_1506;
wire   [0:0] slt_fu_938_p2;
reg   [0:0] slt_reg_1511;
wire   [47:0] tmp_26_fu_952_p2;
reg   [47:0] tmp_26_reg_1516;
wire   [47:0] r_V_10_fu_960_p2;
reg   [47:0] r_V_10_reg_1521;
wire    ap_CS_fsm_state30;
wire   [31:0] r_V_11_fu_1200_p2;
reg   [31:0] r_V_11_reg_1526;
wire   [0:0] rev_fu_969_p2;
reg   [0:0] rev_reg_1531;
wire   [23:0] next_mul5_fu_974_p2;
reg   [23:0] next_mul5_reg_1536;
wire    ap_CS_fsm_state31;
wire   [7:0] jj_fu_984_p2;
reg   [7:0] jj_reg_1544;
wire  signed [47:0] grp_fu_1205_p3;
reg  signed [47:0] r_V_13_reg_1555;
wire   [0:0] exitcond4_fu_979_p2;
wire   [0:0] brmerge_fu_1012_p2;
wire   [0:0] tmp_32_fu_1025_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_fu_1034_p2;
reg   [31:0] tmp_reg_1560;
wire   [47:0] tmp1_fu_1042_p2;
reg   [47:0] tmp1_reg_1565;
wire    ap_CS_fsm_state32;
wire   [15:0] cin_fu_1052_p2;
reg   [15:0] cin_reg_1573;
wire    ap_CS_fsm_state33;
reg   [31:0] gmem_addr_2_reg_1578;
wire   [0:0] exitcond5_fu_1047_p2;
wire   [31:0] next_mul_fu_1082_p2;
reg   [31:0] next_mul_reg_1584;
wire   [47:0] tmp_33_fu_1096_p2;
reg   [47:0] tmp_33_reg_1589;
reg   [31:0] gmem_addr_3_reg_1594;
reg   [31:0] gmem_addr_2_read_reg_1600;
reg   [31:0] gmem_addr_3_read_reg_1605;
wire   [31:0] grp_fu_473_p2;
reg   [31:0] tp_reg_1610;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_467_p2;
wire    ap_CS_fsm_state51;
reg   [31:0] gmem_addr_1_reg_1620;
wire    ap_CS_fsm_state53;
reg   [31:0] gmem_addr_read_reg_1626;
reg   [31:0] sum_3_reg_1631;
wire    ap_CS_fsm_state64;
wire   [31:0] p_s_fu_1183_p3;
reg   [31:0] p_s_reg_1638;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [15:0] i_op_assign_s_reg_282;
reg   [15:0] i_op_assign_1_reg_293;
reg   [15:0] phi_mul1_reg_304;
reg   [15:0] i_op_assign_2_reg_315;
reg   [31:0] r_V_9_reg_326;
reg   [15:0] phi_mul3_reg_338;
reg   [31:0] sum_reg_349;
reg   [7:0] i_op_assign_3_reg_361;
reg   [15:0] r_V_16_reg_372;
reg   [31:0] sum_1_reg_384;
wire    ap_CS_fsm_state52;
reg   [7:0] i_op_assign_5_reg_396;
reg   [23:0] r_V_17_reg_407;
reg   [31:0] sum_2_reg_418;
reg   [15:0] i_op_assign_reg_429;
reg   [31:0] r_V_18_reg_440;
reg   [31:0] sum_1_be_reg_451;
wire   [63:0] bias6_sum_cast_fu_836_p1;
wire  signed [63:0] feature_in2_sum9_cas_fu_1072_p1;
wire   [63:0] W4_sum_cast_fu_1109_p1;
wire   [63:0] feature_out8_sum_cas_fu_1127_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [31:0] grp_fu_467_p0;
reg   [31:0] grp_fu_467_p1;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state43;
wire   [8:0] tmp_2_cast_fu_522_p1;
wire   [8:0] r_V_tr_fu_526_p2;
wire   [8:0] p_neg4_fu_540_p2;
wire   [7:0] tmp_3_fu_546_p4;
wire   [0:0] tmp_8_fu_532_p3;
wire   [7:0] tmp_6_fu_566_p2;
wire   [7:0] tmp_12_fu_556_p4;
wire   [8:0] tmp_37_cast_fu_580_p1;
wire   [8:0] r_V_1_tr_fu_584_p2;
wire   [8:0] p_neg_fu_598_p2;
wire   [7:0] tmp_14_fu_604_p4;
wire   [0:0] tmp_13_fu_590_p3;
wire   [7:0] tmp_16_fu_624_p2;
wire   [7:0] tmp_15_fu_614_p4;
wire   [7:0] pad_x_V_fu_572_p3;
wire   [7:0] pad_y_V_fu_630_p3;
wire   [8:0] r_V_2_fu_654_p3;
wire   [16:0] r_V_2_cast_fu_661_p1;
wire   [16:0] r_V_3_fu_668_p2;
wire   [17:0] r_V_3_cast_fu_674_p1;
wire   [17:0] rhs_V_2_cast_fu_678_p1;
wire   [17:0] r_V_4_fu_681_p2;
wire  signed [18:0] grp_fu_694_p0;
wire   [8:0] grp_fu_694_p1;
wire   [8:0] r_V_6_fu_700_p3;
wire   [16:0] r_V_6_cast_fu_707_p1;
wire   [16:0] r_V_7_fu_714_p2;
wire   [17:0] r_V_7_cast_fu_720_p1;
wire   [17:0] rhs_V_5_cast_fu_724_p1;
wire   [17:0] r_V_8_fu_727_p2;
wire  signed [18:0] grp_fu_740_p0;
wire   [8:0] grp_fu_740_p1;
wire   [15:0] grp_fu_694_p2;
wire   [15:0] tmp_18_fu_758_p1;
wire   [15:0] grp_fu_740_p2;
wire   [15:0] tmp_21_fu_768_p1;
wire   [30:0] tmp_17_cast1_fu_823_p1;
wire   [30:0] bias6_sum_fu_831_p2;
wire   [31:0] r_V_1_fu_874_p0;
wire   [15:0] r_V_1_fu_874_p1;
wire   [15:0] tmp_27_fu_921_p1;
wire  signed [16:0] lhs_V_13_cast_fu_934_p1;
wire   [31:0] tmp3_fu_943_p2;
wire   [47:0] tmp3_cast_fu_948_p1;
wire  signed [31:0] r_V_10_fu_960_p0;
wire   [15:0] r_V_10_fu_960_p1;
wire   [15:0] tmp_29_fu_990_p1;
wire  signed [15:0] w_V_fu_994_p2;
wire   [15:0] tmp_30_fu_999_p2;
wire   [0:0] tmp_31_fu_1004_p3;
wire  signed [16:0] lhs_V_9_cast_fu_1021_p1;
wire   [31:0] lhs_V_12_cast_fu_1030_p1;
wire   [31:0] tmp1_fu_1042_p0;
wire   [15:0] tmp1_fu_1042_p1;
wire   [47:0] rhs_V_14_cast_fu_1058_p1;
(* use_dsp48 = "no" *) wire   [47:0] r_V_15_fu_1062_p2;
wire   [47:0] feature_in2_sum9_fu_1067_p2;
wire   [31:0] tmp2_fu_1087_p2;
wire   [47:0] tmp2_cast_fu_1092_p1;
wire   [48:0] tmp_36_cast_cast_fu_1101_p1;
wire   [48:0] W4_sum_fu_1104_p2;
wire   [48:0] tmp_26_cast_cast_fu_1119_p1;
wire   [48:0] feature_out8_sum_fu_1122_p2;
wire   [31:0] sum_4_to_int_fu_1137_p1;
wire   [7:0] tmp_23_fu_1140_p4;
wire   [22:0] tmp_24_fu_1150_p1;
wire   [0:0] notrhs_fu_1160_p2;
wire   [0:0] notlhs_fu_1154_p2;
wire   [0:0] tmp_25_fu_1166_p2;
wire   [0:0] tmp_28_fu_477_p2;
wire   [0:0] rhs_V_fu_1172_p2;
wire   [0:0] r_V_fu_1178_p2;
wire   [15:0] r_V_5_fu_1190_p0;
wire   [15:0] r_V_5_fu_1190_p1;
wire   [15:0] r_V_14_fu_1195_p0;
wire   [15:0] r_V_11_fu_1200_p0;
wire   [15:0] r_V_11_fu_1200_p1;
wire   [15:0] grp_fu_1205_p0;
reg    grp_fu_694_ap_start;
wire    grp_fu_694_ap_done;
reg    grp_fu_740_ap_start;
wire    grp_fu_740_ap_done;
reg   [70:0] ap_NS_fsm;
wire   [18:0] grp_fu_694_p10;
wire   [18:0] grp_fu_740_p10;
wire   [31:0] r_V_11_fu_1200_p00;
wire   [47:0] r_V_1_fu_874_p00;
wire   [31:0] r_V_5_fu_1190_p00;
wire   [47:0] tmp1_fu_1042_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .W(W),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1620),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(p_s_reg_1638),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_467_p0),
    .din1(grp_fu_467_p1),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1600),
    .din1(gmem_addr_3_read_reg_1605),
    .ce(1'b1),
    .dout(grp_fu_473_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U3(
    .din0(sum_3_reg_1631),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_28_fu_477_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_694_ap_start),
    .done(grp_fu_694_ap_done),
    .din0(grp_fu_694_p0),
    .din1(grp_fu_694_p1),
    .ce(1'b1),
    .dout(grp_fu_694_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_740_ap_start),
    .done(grp_fu_740_ap_done),
    .din0(grp_fu_740_p0),
    .din1(grp_fu_740_p1),
    .ce(1'b1),
    .dout(grp_fu_740_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U6(
    .din0(r_V_5_fu_1190_p0),
    .din1(r_V_5_fu_1190_p1),
    .dout(r_V_5_fu_1190_p2)
);

Conv_mul_mul_16nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsg8j_U7(
    .din0(r_V_14_fu_1195_p0),
    .din1(h_V_fu_925_p2),
    .dout(r_V_14_fu_1195_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U8(
    .din0(r_V_11_fu_1200_p0),
    .din1(r_V_11_fu_1200_p1),
    .dout(r_V_11_fu_1200_p2)
);

Conv_mac_muladd_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv_mac_muladd_1hbi_U9(
    .din0(grp_fu_1205_p0),
    .din1(w_V_fu_994_p2),
    .din2(r_V_10_reg_1521),
    .dout(grp_fu_1205_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state65)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_889_p2 == 1'd1))) begin
        i_op_assign_1_reg_293 <= i_reg_1445;
    end else if (((exitcond1_fu_812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        i_op_assign_1_reg_293 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_op_assign_2_reg_315 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_op_assign_2_reg_315 <= j_reg_1478;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_979_p2 == 1'd1))) begin
        i_op_assign_3_reg_361 <= ii_reg_1496;
    end else if (((exitcond_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        i_op_assign_3_reg_361 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_op_assign_5_reg_396 <= jj_reg_1544;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_op_assign_5_reg_396 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_op_assign_reg_429 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        i_op_assign_reg_429 <= cin_reg_1573;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_855_p2 == 1'd1))) begin
        i_op_assign_s_reg_282 <= cout_reg_1420;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_s_reg_282 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_889_p2 == 1'd1))) begin
        phi_mul1_reg_304 <= next_mul1_reg_1437;
    end else if (((exitcond1_fu_812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_mul1_reg_304 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_mul3_reg_338 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        phi_mul3_reg_338 <= next_mul2_reg_1465;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_979_p2 == 1'd1))) begin
        r_V_16_reg_372 <= next_mul4_reg_1488;
    end else if (((exitcond_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        r_V_16_reg_372 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        r_V_17_reg_407 <= next_mul5_reg_1536;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        r_V_17_reg_407 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        r_V_18_reg_440 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        r_V_18_reg_440 <= next_mul_reg_1584;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        r_V_9_reg_326 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        r_V_9_reg_326 <= next_mul3_reg_1470;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond5_fu_1047_p2 == 1'd1))) begin
        sum_1_be_reg_451 <= sum_2_reg_418;
    end else if ((((exitcond4_fu_979_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (brmerge_fu_1012_p2 == 1'd1)) | ((tmp_32_fu_1025_p2 == 1'd0) & (brmerge_fu_1012_p2 == 1'd0) & (exitcond4_fu_979_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)))) begin
        sum_1_be_reg_451 <= sum_1_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_1_reg_384 <= sum_1_be_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        sum_1_reg_384 <= sum_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_2_reg_418 <= sum_1_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        sum_2_reg_418 <= grp_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_979_p2 == 1'd1))) begin
        sum_reg_349 <= sum_1_reg_384;
    end else if (((exitcond_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        sum_reg_349 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CHin_V_read_reg_1259 <= CHin_V;
        CHout_V_read_reg_1241 <= CHout_V;
        Hin_V_read_reg_1254 <= Hin_V;
        Kx_V_read_reg_1234 <= Kx_V;
        Ky_V_read_reg_1228 <= Ky_V;
        Sx_V_read_reg_1222 <= Sx_V;
        Sy_V_read_reg_1216 <= Sy_V;
        Win_V_read_reg_1248 <= Win_V;
        p_1_reg_1286 <= p_1_fu_638_p3;
        p_2_reg_1292 <= p_2_fu_646_p3;
        relu_en_V_read_reg_1211 <= relu_en_V;
        tmp_1_reg_1266 <= {{feature_out[31:2]}};
        tmp_2_reg_1271 <= {{bias[31:2]}};
        tmp_4_reg_1276 <= {{W[31:2]}};
        tmp_5_reg_1281 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Wout_V_reg_1348 <= Wout_V_fu_762_p2;
        rhs_V_10_cast_reg_1401[15 : 0] <= rhs_V_10_cast_fu_802_p1[15 : 0];
        rhs_V_1_cast_reg_1390[7 : 0] <= rhs_V_1_cast_fu_796_p1[7 : 0];
        rhs_V_1_reg_1378[15 : 0] <= rhs_V_1_fu_790_p1[15 : 0];
        rhs_V_2_reg_1385[15 : 0] <= rhs_V_2_fu_793_p1[15 : 0];
        rhs_V_7_cast_reg_1412[15 : 0] <= rhs_V_7_cast_fu_808_p1[15 : 0];
        rhs_V_8_cast_reg_1395[15 : 0] <= rhs_V_8_cast_fu_799_p1[15 : 0];
        rhs_V_9_cast_reg_1406[15 : 0] <= rhs_V_9_cast_fu_805_p1[15 : 0];
        tmp_10_reg_1368[7 : 0] <= tmp_10_fu_784_p1[7 : 0];
        tmp_11_reg_1373[7 : 0] <= tmp_11_fu_787_p1[7 : 0];
        tmp_13_cast_reg_1338[29 : 0] <= tmp_13_cast_fu_752_p1[29 : 0];
        tmp_16_cast_reg_1343[29 : 0] <= tmp_16_cast_fu_755_p1[29 : 0];
        tmp_2_cast1_reg_1328[29 : 0] <= tmp_2_cast1_fu_746_p1[29 : 0];
        tmp_7_reg_1353 <= tmp_7_fu_772_p2;
        tmp_8_cast_reg_1333[29 : 0] <= tmp_8_cast_fu_749_p1[29 : 0];
        tmp_9_reg_1358[7 : 0] <= tmp_9_fu_778_p1[7 : 0];
        tmp_s_reg_1363[7 : 0] <= tmp_s_fu_781_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        cin_reg_1573 <= cin_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cout_reg_1420 <= cout_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_addr_1_reg_1620 <= feature_out8_sum_cas_fu_1127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        gmem_addr_2_read_reg_1600 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1047_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem_addr_2_reg_1578 <= feature_in2_sum9_cas_fu_1072_p1;
        next_mul_reg_1584 <= next_mul_fu_1082_p2;
        tmp_33_reg_1589 <= tmp_33_fu_1096_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        gmem_addr_3_read_reg_1605 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_3_reg_1594 <= W4_sum_cast_fu_1109_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_addr_read_reg_1626 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_addr_reg_1431[30 : 0] <= bias6_sum_cast_fu_836_p1[30 : 0];
        tmp_17_cast_reg_1425[15 : 0] <= tmp_17_cast_fu_827_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd0))) begin
        h_V_reg_1501 <= h_V_fu_925_p2;
        r_V_14_reg_1506 <= r_V_14_fu_1195_p2;
        slt_reg_1511 <= slt_fu_938_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_reg_1445 <= i_fu_860_p2;
        next_mul1_reg_1437 <= next_mul1_fu_846_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29))) begin
        ii_reg_1496 <= ii_fu_915_p2;
        next_mul4_reg_1488 <= next_mul4_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_reg_1478 <= j_fu_894_p2;
        next_mul2_reg_1465 <= next_mul2_fu_879_p2;
        next_mul3_reg_1470 <= next_mul3_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        jj_reg_1544 <= jj_fu_984_p2;
        next_mul5_reg_1536 <= next_mul5_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lhs_V_2_cast_reg_1298[15 : 0] <= lhs_V_2_cast_fu_665_p1[15 : 0];
        lhs_V_4_cast_reg_1313[15 : 0] <= lhs_V_4_cast_fu_711_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        p_s_reg_1638 <= p_s_fu_1183_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        r_V_10_reg_1521 <= r_V_10_fu_960_p2;
        r_V_11_reg_1526 <= r_V_11_fu_1200_p2;
        rev_reg_1531 <= rev_fu_969_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_fu_1012_p2 == 1'd0) & (exitcond4_fu_979_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (tmp_32_fu_1025_p2 == 1'd1))) begin
        r_V_13_reg_1555 <= grp_fu_1205_p3;
        tmp_reg_1560 <= tmp_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        r_V_1_reg_1460 <= r_V_1_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_855_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        r_V_5_reg_1455 <= r_V_5_fu_1190_p2;
        tmp_20_reg_1450 <= tmp_20_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        sum_3_reg_1631 <= grp_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp1_reg_1565 <= tmp1_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        tmp_22_reg_1483 <= tmp_22_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1))) begin
        tmp_26_reg_1516 <= tmp_26_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tp_reg_1610 <= grp_fu_473_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_812_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_812_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            gmem_ARADDR = gmem_addr_3_reg_1594;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            gmem_ARADDR = gmem_addr_2_reg_1578;
        end else if (((1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1))) begin
            gmem_ARADDR = gmem_addr_reg_1431;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state65))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | ((1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state59))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_467_p0 = sum_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_467_p0 = sum_2_reg_418;
    end else begin
        grp_fu_467_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_467_p1 = gmem_addr_read_reg_1626;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_467_p1 = tp_reg_1610;
    end else begin
        grp_fu_467_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_694_ap_start = 1'b1;
    end else begin
        grp_fu_694_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_740_ap_start = 1'b1;
    end else begin
        grp_fu_740_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_812_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_855_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_889_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_910_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_979_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((brmerge_fu_1012_p2 == 1'd0) & (exitcond4_fu_979_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (tmp_32_fu_1025_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (exitcond5_fu_1047_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W4_sum_cast_fu_1109_p1 = W4_sum_fu_1104_p2;

assign W4_sum_fu_1104_p2 = (tmp_36_cast_cast_fu_1101_p1 + tmp_13_cast_reg_1338);

assign Wout_V_fu_762_p2 = (16'd1 + tmp_18_fu_758_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

always @ (*) begin
    ap_block_state29_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond3_fu_910_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias6_sum_cast_fu_836_p1 = bias6_sum_fu_831_p2;

assign bias6_sum_fu_831_p2 = (tmp_17_cast1_fu_823_p1 + tmp_8_cast_reg_1333);

assign brmerge_fu_1012_p2 = (tmp_31_fu_1004_p3 | rev_reg_1531);

assign cin_fu_1052_p2 = (i_op_assign_reg_429 + 16'd1);

assign cout_fu_817_p2 = (i_op_assign_s_reg_282 + 16'd1);

assign exitcond1_fu_812_p2 = ((i_op_assign_s_reg_282 == CHout_V_read_reg_1241) ? 1'b1 : 1'b0);

assign exitcond2_fu_855_p2 = ((i_op_assign_1_reg_293 == tmp_7_reg_1353) ? 1'b1 : 1'b0);

assign exitcond3_fu_910_p2 = ((i_op_assign_3_reg_361 == Ky_V_read_reg_1228) ? 1'b1 : 1'b0);

assign exitcond4_fu_979_p2 = ((i_op_assign_5_reg_396 == Kx_V_read_reg_1234) ? 1'b1 : 1'b0);

assign exitcond5_fu_1047_p2 = ((i_op_assign_reg_429 == CHin_V_read_reg_1259) ? 1'b1 : 1'b0);

assign exitcond_fu_889_p2 = ((i_op_assign_2_reg_315 == Wout_V_reg_1348) ? 1'b1 : 1'b0);

assign feature_in2_sum9_cas_fu_1072_p1 = $signed(feature_in2_sum9_fu_1067_p2);

assign feature_in2_sum9_fu_1067_p2 = (r_V_15_fu_1062_p2 + tmp_16_cast_reg_1343);

assign feature_out8_sum_cas_fu_1127_p1 = feature_out8_sum_fu_1122_p2;

assign feature_out8_sum_fu_1122_p2 = (tmp_2_cast1_reg_1328 + tmp_26_cast_cast_fu_1119_p1);

assign grp_fu_1205_p0 = rhs_V_1_reg_1378;

assign grp_fu_694_p0 = $signed(r_V_4_fu_681_p2);

assign grp_fu_694_p1 = grp_fu_694_p10;

assign grp_fu_694_p10 = Sx_V_read_reg_1222;

assign grp_fu_740_p0 = $signed(r_V_8_fu_727_p2);

assign grp_fu_740_p1 = grp_fu_740_p10;

assign grp_fu_740_p10 = Sy_V_read_reg_1216;

assign h_V_fu_925_p2 = (tmp_20_reg_1450 + tmp_27_fu_921_p1);

assign i_fu_860_p2 = (i_op_assign_1_reg_293 + 16'd1);

assign ii_fu_915_p2 = (i_op_assign_3_reg_361 + 8'd1);

assign j_fu_894_p2 = (i_op_assign_2_reg_315 + 16'd1);

assign jj_fu_984_p2 = (i_op_assign_5_reg_396 + 8'd1);

assign lhs_V_12_cast_fu_1030_p1 = r_V_17_reg_407;

assign lhs_V_13_cast_fu_934_p1 = h_V_fu_925_p2;

assign lhs_V_2_cast_fu_665_p1 = Win_V_read_reg_1248;

assign lhs_V_4_cast_fu_711_p1 = Hin_V_read_reg_1254;

assign lhs_V_9_cast_fu_1021_p1 = w_V_fu_994_p2;

assign next_mul1_fu_846_p2 = (phi_mul1_reg_304 + tmp_9_reg_1358);

assign next_mul2_fu_879_p2 = (phi_mul3_reg_338 + tmp_10_reg_1368);

assign next_mul3_fu_884_p2 = (r_V_9_reg_326 + rhs_V_9_cast_reg_1406);

assign next_mul4_fu_905_p2 = (r_V_16_reg_372 + rhs_V_1_cast_reg_1390);

assign next_mul5_fu_974_p2 = (r_V_17_reg_407 + rhs_V_10_cast_reg_1401);

assign next_mul_fu_1082_p2 = (rhs_V_9_cast_reg_1406 + r_V_18_reg_440);

assign notlhs_fu_1154_p2 = ((tmp_23_fu_1140_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1160_p2 = ((tmp_24_fu_1150_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_1_fu_638_p3 = ((mode_V[0:0] === 1'b1) ? pad_x_V_fu_572_p3 : 8'd0);

assign p_2_fu_646_p3 = ((mode_V[0:0] === 1'b1) ? pad_y_V_fu_630_p3 : 8'd0);

assign p_neg4_fu_540_p2 = (9'd1 - tmp_2_cast_fu_522_p1);

assign p_neg_fu_598_p2 = (9'd1 - tmp_37_cast_fu_580_p1);

assign p_s_fu_1183_p3 = ((r_V_fu_1178_p2[0:0] === 1'b1) ? 32'd0 : sum_3_reg_1631);

assign pad_x_V_fu_572_p3 = ((tmp_8_fu_532_p3[0:0] === 1'b1) ? tmp_6_fu_566_p2 : tmp_12_fu_556_p4);

assign pad_y_V_fu_630_p3 = ((tmp_13_fu_590_p3[0:0] === 1'b1) ? tmp_16_fu_624_p2 : tmp_15_fu_614_p4);

assign r_V_10_fu_960_p0 = r_V_14_reg_1506;

assign r_V_10_fu_960_p1 = rhs_V_2_reg_1385;

assign r_V_10_fu_960_p2 = ($signed(r_V_10_fu_960_p0) * $signed({{1'b0}, {r_V_10_fu_960_p1}}));

assign r_V_11_fu_1200_p0 = r_V_11_fu_1200_p00;

assign r_V_11_fu_1200_p00 = r_V_16_reg_372;

assign r_V_11_fu_1200_p1 = rhs_V_1_reg_1378;

assign r_V_14_fu_1195_p0 = rhs_V_1_reg_1378;

assign r_V_15_fu_1062_p2 = ($signed(rhs_V_14_cast_fu_1058_p1) + $signed(r_V_13_reg_1555));

assign r_V_1_fu_874_p0 = r_V_1_fu_874_p00;

assign r_V_1_fu_874_p00 = r_V_5_reg_1455;

assign r_V_1_fu_874_p1 = rhs_V_8_cast_reg_1395;

assign r_V_1_fu_874_p2 = (r_V_1_fu_874_p0 * r_V_1_fu_874_p1);

assign r_V_1_tr_fu_584_p2 = ($signed(9'd511) + $signed(tmp_37_cast_fu_580_p1));

assign r_V_2_cast_fu_661_p1 = r_V_2_fu_654_p3;

assign r_V_2_fu_654_p3 = {{p_1_reg_1286}, {1'd0}};

assign r_V_3_cast_fu_674_p1 = r_V_3_fu_668_p2;

assign r_V_3_fu_668_p2 = (lhs_V_2_cast_fu_665_p1 + r_V_2_cast_fu_661_p1);

assign r_V_4_fu_681_p2 = (r_V_3_cast_fu_674_p1 - rhs_V_2_cast_fu_678_p1);

assign r_V_5_fu_1190_p0 = r_V_5_fu_1190_p00;

assign r_V_5_fu_1190_p00 = i_op_assign_1_reg_293;

assign r_V_5_fu_1190_p1 = rhs_V_7_cast_reg_1412;

assign r_V_6_cast_fu_707_p1 = r_V_6_fu_700_p3;

assign r_V_6_fu_700_p3 = {{p_2_reg_1292}, {1'd0}};

assign r_V_7_cast_fu_720_p1 = r_V_7_fu_714_p2;

assign r_V_7_fu_714_p2 = (lhs_V_4_cast_fu_711_p1 + r_V_6_cast_fu_707_p1);

assign r_V_8_fu_727_p2 = (r_V_7_cast_fu_720_p1 - rhs_V_5_cast_fu_724_p1);

assign r_V_fu_1178_p2 = (rhs_V_fu_1172_p2 & relu_en_V_read_reg_1211);

assign r_V_tr_fu_526_p2 = ($signed(9'd511) + $signed(tmp_2_cast_fu_522_p1));

assign rev_fu_969_p2 = (slt_reg_1511 ^ 1'd1);

assign rhs_V_10_cast_fu_802_p1 = CHin_V_read_reg_1259;

assign rhs_V_14_cast_fu_1058_p1 = i_op_assign_reg_429;

assign rhs_V_1_cast_fu_796_p1 = Kx_V_read_reg_1234;

assign rhs_V_1_fu_790_p1 = CHin_V_read_reg_1259;

assign rhs_V_2_cast_fu_678_p1 = Kx_V_read_reg_1234;

assign rhs_V_2_fu_793_p1 = Win_V_read_reg_1248;

assign rhs_V_5_cast_fu_724_p1 = Ky_V_read_reg_1228;

assign rhs_V_7_cast_fu_808_p1 = Wout_V_fu_762_p2;

assign rhs_V_8_cast_fu_799_p1 = CHout_V_read_reg_1241;

assign rhs_V_9_cast_fu_805_p1 = CHout_V_read_reg_1241;

assign rhs_V_fu_1172_p2 = (tmp_28_fu_477_p2 & tmp_25_fu_1166_p2);

assign slt_fu_938_p2 = (($signed(lhs_V_13_cast_fu_934_p1) < $signed(lhs_V_4_cast_reg_1313)) ? 1'b1 : 1'b0);

assign sum_4_to_int_fu_1137_p1 = sum_3_reg_1631;

assign tmp1_fu_1042_p0 = tmp1_fu_1042_p00;

assign tmp1_fu_1042_p00 = tmp_reg_1560;

assign tmp1_fu_1042_p1 = rhs_V_8_cast_reg_1395;

assign tmp1_fu_1042_p2 = (tmp1_fu_1042_p0 * tmp1_fu_1042_p1);

assign tmp2_cast_fu_1092_p1 = tmp2_fu_1087_p2;

assign tmp2_fu_1087_p2 = (tmp_17_cast_reg_1425 + r_V_18_reg_440);

assign tmp3_cast_fu_948_p1 = tmp3_fu_943_p2;

assign tmp3_fu_943_p2 = (tmp_17_cast_reg_1425 + r_V_9_reg_326);

assign tmp_10_fu_784_p1 = Sx_V_read_reg_1222;

assign tmp_11_fu_787_p1 = p_1_reg_1286;

assign tmp_12_fu_556_p4 = {{r_V_tr_fu_526_p2[8:1]}};

assign tmp_13_cast_fu_752_p1 = tmp_4_reg_1276;

assign tmp_13_fu_590_p3 = r_V_1_tr_fu_584_p2[32'd8];

assign tmp_14_fu_604_p4 = {{p_neg_fu_598_p2[8:1]}};

assign tmp_15_fu_614_p4 = {{r_V_1_tr_fu_584_p2[8:1]}};

assign tmp_16_cast_fu_755_p1 = tmp_5_reg_1281;

assign tmp_16_fu_624_p2 = (8'd0 - tmp_14_fu_604_p4);

assign tmp_17_cast1_fu_823_p1 = i_op_assign_s_reg_282;

assign tmp_17_cast_fu_827_p1 = i_op_assign_s_reg_282;

assign tmp_18_fu_758_p1 = grp_fu_694_p2[15:0];

assign tmp_20_fu_866_p2 = (phi_mul1_reg_304 - tmp_s_reg_1363);

assign tmp_21_fu_768_p1 = grp_fu_740_p2[15:0];

assign tmp_22_fu_900_p2 = (phi_mul3_reg_338 - tmp_11_reg_1373);

assign tmp_23_fu_1140_p4 = {{sum_4_to_int_fu_1137_p1[30:23]}};

assign tmp_24_fu_1150_p1 = sum_4_to_int_fu_1137_p1[22:0];

assign tmp_25_fu_1166_p2 = (notrhs_fu_1160_p2 | notlhs_fu_1154_p2);

assign tmp_26_cast_cast_fu_1119_p1 = tmp_26_reg_1516;

assign tmp_26_fu_952_p2 = (r_V_1_reg_1460 + tmp3_cast_fu_948_p1);

assign tmp_27_fu_921_p1 = i_op_assign_3_reg_361;

assign tmp_29_fu_990_p1 = i_op_assign_5_reg_396;

assign tmp_2_cast1_fu_746_p1 = tmp_1_reg_1266;

assign tmp_2_cast_fu_522_p1 = Kx_V;

assign tmp_30_fu_999_p2 = (w_V_fu_994_p2 | h_V_reg_1501);

assign tmp_31_fu_1004_p3 = tmp_30_fu_999_p2[32'd15];

assign tmp_32_fu_1025_p2 = (($signed(lhs_V_9_cast_fu_1021_p1) < $signed(lhs_V_2_cast_reg_1298)) ? 1'b1 : 1'b0);

assign tmp_33_fu_1096_p2 = (tmp1_reg_1565 + tmp2_cast_fu_1092_p1);

assign tmp_36_cast_cast_fu_1101_p1 = tmp_33_reg_1589;

assign tmp_37_cast_fu_580_p1 = Ky_V;

assign tmp_3_fu_546_p4 = {{p_neg4_fu_540_p2[8:1]}};

assign tmp_6_fu_566_p2 = (8'd0 - tmp_3_fu_546_p4);

assign tmp_7_fu_772_p2 = (16'd1 + tmp_21_fu_768_p1);

assign tmp_8_cast_fu_749_p1 = tmp_2_reg_1271;

assign tmp_8_fu_532_p3 = r_V_tr_fu_526_p2[32'd8];

assign tmp_9_fu_778_p1 = Sy_V_read_reg_1216;

assign tmp_fu_1034_p2 = (r_V_11_reg_1526 + lhs_V_12_cast_fu_1030_p1);

assign tmp_s_fu_781_p1 = p_2_reg_1292;

assign w_V_fu_994_p2 = (tmp_29_fu_990_p1 + tmp_22_reg_1483);

always @ (posedge ap_clk) begin
    lhs_V_2_cast_reg_1298[16] <= 1'b0;
    lhs_V_4_cast_reg_1313[16] <= 1'b0;
    tmp_2_cast1_reg_1328[48:30] <= 19'b0000000000000000000;
    tmp_8_cast_reg_1333[30] <= 1'b0;
    tmp_13_cast_reg_1338[48:30] <= 19'b0000000000000000000;
    tmp_16_cast_reg_1343[47:30] <= 18'b000000000000000000;
    tmp_9_reg_1358[15:8] <= 8'b00000000;
    tmp_s_reg_1363[15:8] <= 8'b00000000;
    tmp_10_reg_1368[15:8] <= 8'b00000000;
    tmp_11_reg_1373[15:8] <= 8'b00000000;
    rhs_V_1_reg_1378[31:16] <= 16'b0000000000000000;
    rhs_V_2_reg_1385[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_1_cast_reg_1390[15:8] <= 8'b00000000;
    rhs_V_8_cast_reg_1395[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_10_cast_reg_1401[23:16] <= 8'b00000000;
    rhs_V_9_cast_reg_1406[31:16] <= 16'b0000000000000000;
    rhs_V_7_cast_reg_1412[31:16] <= 16'b0000000000000000;
    tmp_17_cast_reg_1425[31:16] <= 16'b0000000000000000;
    gmem_addr_reg_1431[31] <= 1'b0;
end

endmodule //Conv
