-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=18,HLS_SYN_FF=3738,HLS_SYN_LUT=4339}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond3_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V_read_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_1216 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_1222 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_1228 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1234 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_1241 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V_read_reg_1254 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1259 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1266 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_1271 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_1276 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_1281 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_1_fu_638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_646_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_1292 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_cast_fu_665_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_cast_reg_1298 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lhs_V_4_cast_fu_711_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_reg_1313 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_cast1_fu_746_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_2_cast1_reg_1328 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_8_cast_fu_749_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_cast_reg_1333 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_cast_fu_752_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_13_cast_reg_1338 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_16_cast_fu_755_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_16_cast_reg_1343 : STD_LOGIC_VECTOR (47 downto 0);
    signal Wout_V_fu_762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1348 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_772_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_778_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1358 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_1368 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_787_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_1373 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_fu_793_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1385 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_1_cast_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_cast_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_8_cast_fu_799_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_8_cast_reg_1395 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_10_cast_fu_802_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_10_cast_reg_1401 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_9_cast_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_9_cast_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_817_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cout_reg_1420 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_17_cast_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_846_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul1_reg_1437 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_fu_860_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1445 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_1450 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_874_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_reg_1460 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal next_mul2_fu_879_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1465 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal next_mul3_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1478 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_reg_1483 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_905_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul4_reg_1488 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state29_io : BOOLEAN;
    signal ii_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1496 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_14_fu_1195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_14_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_952_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_26_reg_1516 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_fu_960_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_reg_1521 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal r_V_11_fu_1200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_1531 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul5_fu_974_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal next_mul5_reg_1536 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal jj_fu_984_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1544 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1205_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_13_reg_1555 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond4_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_1034_p2 : signal is "no";
    signal tmp_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1042_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_reg_1565 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal cin_fu_1052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cin_reg_1573 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal gmem_addr_2_reg_1578 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_1082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1096_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_33_reg_1589 : STD_LOGIC_VECTOR (47 downto 0);
    signal gmem_addr_3_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1600 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1605 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tp_reg_1610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_addr_1_reg_1620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal gmem_addr_read_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal p_s_fu_1183_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal i_op_assign_s_reg_282 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_293 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_304 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_315 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_338 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_16_reg_372 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_1_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_op_assign_5_reg_396 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_reg_407 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_2_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_429 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_18_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_be_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_sum_cast_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum9_cas_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal W4_sum_cast_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out8_sum_cas_fu_1127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal grp_fu_467_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_2_cast_fu_522_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_tr_fu_526_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg4_fu_540_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_546_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_cast_fu_580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_tr_fu_584_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_598_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_614_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_654_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_cast_fu_661_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_668_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_cast_fu_674_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_cast_fu_678_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_681_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_694_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_694_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_fu_700_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_cast_fu_707_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_fu_714_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_cast_fu_720_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_5_cast_fu_724_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_fu_727_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_740_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_740_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_694_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_758_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_cast1_fu_823_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias6_sum_fu_831_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_1_fu_874_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_874_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_921_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_13_cast_fu_934_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_fu_948_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_fu_960_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_990_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_994_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_999_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_9_cast_fu_1021_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_12_cast_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1042_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1042_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_14_cast_fu_1058_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_15_fu_1062_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_15_fu_1062_p2 : signal is "no";
    signal feature_in2_sum9_fu_1067_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp2_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_cast_fu_1092_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_36_cast_cast_fu_1101_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal W4_sum_fu_1104_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_26_cast_cast_fu_1119_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out8_sum_fu_1122_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal sum_4_to_int_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1140_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1150_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1190_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_1190_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_14_fu_1195_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_fu_1200_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_fu_1200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_694_ap_start : STD_LOGIC;
    signal grp_fu_694_ap_done : STD_LOGIC;
    signal grp_fu_740_ap_start : STD_LOGIC;
    signal grp_fu_740_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_694_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_740_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_11_fu_1200_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_874_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_5_fu_1190_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1042_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component Conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_19s_9nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1620,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => p_s_reg_1638,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_fadd_32ns_32bkb_U1 : component Conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_467_p0,
        din1 => grp_fu_467_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_467_p2);

    Conv_fmul_32ns_32cud_U2 : component Conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_2_read_reg_1600,
        din1 => gmem_addr_3_read_reg_1605,
        ce => ap_const_logic_1,
        dout => grp_fu_473_p2);

    Conv_fcmp_32ns_32dEe_U3 : component Conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_1631,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_28_fu_477_p2);

    Conv_sdiv_19s_9nseOg_U4 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_694_ap_start,
        done => grp_fu_694_ap_done,
        din0 => grp_fu_694_p0,
        din1 => grp_fu_694_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_694_p2);

    Conv_sdiv_19s_9nseOg_U5 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_740_ap_start,
        done => grp_fu_740_ap_done,
        din0 => grp_fu_740_p0,
        din1 => grp_fu_740_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_740_p2);

    Conv_mul_mul_16nsfYi_U6 : component Conv_mul_mul_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_5_fu_1190_p0,
        din1 => r_V_5_fu_1190_p1,
        dout => r_V_5_fu_1190_p2);

    Conv_mul_mul_16nsg8j_U7 : component Conv_mul_mul_16nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_14_fu_1195_p0,
        din1 => h_V_fu_925_p2,
        dout => r_V_14_fu_1195_p2);

    Conv_mul_mul_16nsfYi_U8 : component Conv_mul_mul_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_11_fu_1200_p0,
        din1 => r_V_11_fu_1200_p1,
        dout => r_V_11_fu_1200_p2);

    Conv_mac_muladd_1hbi_U9 : component Conv_mac_muladd_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_1205_p0,
        din1 => w_V_fu_994_p2,
        din2 => r_V_10_reg_1521,
        dout => grp_fu_1205_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_fu_889_p2 = ap_const_lv1_1))) then 
                i_op_assign_1_reg_293 <= i_reg_1445;
            elsif (((exitcond1_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_op_assign_1_reg_293 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_op_assign_2_reg_315 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                i_op_assign_2_reg_315 <= j_reg_1478;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond4_fu_979_p2 = ap_const_lv1_1))) then 
                i_op_assign_3_reg_361 <= ii_reg_1496;
            elsif (((exitcond_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_op_assign_3_reg_361 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_op_assign_5_reg_396 <= jj_reg_1544;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_op_assign_5_reg_396 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_op_assign_reg_429 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                i_op_assign_reg_429 <= cin_reg_1573;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond2_fu_855_p2 = ap_const_lv1_1))) then 
                i_op_assign_s_reg_282 <= cout_reg_1420;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_op_assign_s_reg_282 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_fu_889_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_304 <= next_mul1_reg_1437;
            elsif (((exitcond1_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                phi_mul1_reg_304 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_mul3_reg_338 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                phi_mul3_reg_338 <= next_mul2_reg_1465;
            end if; 
        end if;
    end process;

    r_V_16_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond4_fu_979_p2 = ap_const_lv1_1))) then 
                r_V_16_reg_372 <= next_mul4_reg_1488;
            elsif (((exitcond_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                r_V_16_reg_372 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    r_V_17_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                r_V_17_reg_407 <= next_mul5_reg_1536;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                r_V_17_reg_407 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    r_V_18_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                r_V_18_reg_440 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                r_V_18_reg_440 <= next_mul_reg_1584;
            end if; 
        end if;
    end process;

    r_V_9_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                r_V_9_reg_326 <= ap_const_lv32_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                r_V_9_reg_326 <= next_mul3_reg_1470;
            end if; 
        end if;
    end process;

    sum_1_be_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond5_fu_1047_p2 = ap_const_lv1_1))) then 
                sum_1_be_reg_451 <= sum_2_reg_418;
            elsif ((((exitcond4_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (brmerge_fu_1012_p2 = ap_const_lv1_1)) or ((tmp_32_fu_1025_p2 = ap_const_lv1_0) and (brmerge_fu_1012_p2 = ap_const_lv1_0) and (exitcond4_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
                sum_1_be_reg_451 <= sum_1_reg_384;
            end if; 
        end if;
    end process;

    sum_1_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                sum_1_reg_384 <= sum_1_be_reg_451;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                sum_1_reg_384 <= sum_reg_349;
            end if; 
        end if;
    end process;

    sum_2_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_2_reg_418 <= sum_1_reg_384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                sum_2_reg_418 <= grp_fu_467_p2;
            end if; 
        end if;
    end process;

    sum_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond4_fu_979_p2 = ap_const_lv1_1))) then 
                sum_reg_349 <= sum_1_reg_384;
            elsif (((exitcond_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                sum_reg_349 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                CHin_V_read_reg_1259 <= CHin_V;
                CHout_V_read_reg_1241 <= CHout_V;
                Hin_V_read_reg_1254 <= Hin_V;
                Kx_V_read_reg_1234 <= Kx_V;
                Ky_V_read_reg_1228 <= Ky_V;
                Sx_V_read_reg_1222 <= Sx_V;
                Sy_V_read_reg_1216 <= Sy_V;
                Win_V_read_reg_1248 <= Win_V;
                p_1_reg_1286 <= p_1_fu_638_p3;
                p_2_reg_1292 <= p_2_fu_646_p3;
                relu_en_V_read_reg_1211 <= relu_en_V;
                tmp_1_reg_1266 <= feature_out(31 downto 2);
                tmp_2_reg_1271 <= bias(31 downto 2);
                tmp_4_reg_1276 <= W(31 downto 2);
                tmp_5_reg_1281 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                Wout_V_reg_1348 <= Wout_V_fu_762_p2;
                    rhs_V_10_cast_reg_1401(15 downto 0) <= rhs_V_10_cast_fu_802_p1(15 downto 0);
                    rhs_V_1_cast_reg_1390(7 downto 0) <= rhs_V_1_cast_fu_796_p1(7 downto 0);
                    rhs_V_1_reg_1378(15 downto 0) <= rhs_V_1_fu_790_p1(15 downto 0);
                    rhs_V_2_reg_1385(15 downto 0) <= rhs_V_2_fu_793_p1(15 downto 0);
                    rhs_V_7_cast_reg_1412(15 downto 0) <= rhs_V_7_cast_fu_808_p1(15 downto 0);
                    rhs_V_8_cast_reg_1395(15 downto 0) <= rhs_V_8_cast_fu_799_p1(15 downto 0);
                    rhs_V_9_cast_reg_1406(15 downto 0) <= rhs_V_9_cast_fu_805_p1(15 downto 0);
                    tmp_10_reg_1368(7 downto 0) <= tmp_10_fu_784_p1(7 downto 0);
                    tmp_11_reg_1373(7 downto 0) <= tmp_11_fu_787_p1(7 downto 0);
                    tmp_13_cast_reg_1338(29 downto 0) <= tmp_13_cast_fu_752_p1(29 downto 0);
                    tmp_16_cast_reg_1343(29 downto 0) <= tmp_16_cast_fu_755_p1(29 downto 0);
                    tmp_2_cast1_reg_1328(29 downto 0) <= tmp_2_cast1_fu_746_p1(29 downto 0);
                tmp_7_reg_1353 <= tmp_7_fu_772_p2;
                    tmp_8_cast_reg_1333(29 downto 0) <= tmp_8_cast_fu_749_p1(29 downto 0);
                    tmp_9_reg_1358(7 downto 0) <= tmp_9_fu_778_p1(7 downto 0);
                    tmp_s_reg_1363(7 downto 0) <= tmp_s_fu_781_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                cin_reg_1573 <= cin_fu_1052_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                cout_reg_1420 <= cout_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                gmem_addr_1_reg_1620 <= feature_out8_sum_cas_fu_1127_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                gmem_addr_2_read_reg_1600 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                gmem_addr_2_reg_1578 <= feature_in2_sum9_cas_fu_1072_p1(32 - 1 downto 0);
                next_mul_reg_1584 <= next_mul_fu_1082_p2;
                tmp_33_reg_1589 <= tmp_33_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                gmem_addr_3_read_reg_1605 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                gmem_addr_3_reg_1594 <= W4_sum_cast_fu_1109_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                gmem_addr_read_reg_1626 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    gmem_addr_reg_1431(30 downto 0) <= bias6_sum_cast_fu_836_p1(32 - 1 downto 0)(30 downto 0);
                    tmp_17_cast_reg_1425(15 downto 0) <= tmp_17_cast_fu_827_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_0))) then
                h_V_reg_1501 <= h_V_fu_925_p2;
                r_V_14_reg_1506 <= r_V_14_fu_1195_p2;
                slt_reg_1511 <= slt_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_reg_1445 <= i_fu_860_p2;
                next_mul1_reg_1437 <= next_mul1_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                ii_reg_1496 <= ii_fu_915_p2;
                next_mul4_reg_1488 <= next_mul4_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                j_reg_1478 <= j_fu_894_p2;
                next_mul2_reg_1465 <= next_mul2_fu_879_p2;
                next_mul3_reg_1470 <= next_mul3_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                jj_reg_1544 <= jj_fu_984_p2;
                next_mul5_reg_1536 <= next_mul5_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    lhs_V_2_cast_reg_1298(15 downto 0) <= lhs_V_2_cast_fu_665_p1(15 downto 0);
                    lhs_V_4_cast_reg_1313(15 downto 0) <= lhs_V_4_cast_fu_711_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                p_s_reg_1638 <= p_s_fu_1183_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                r_V_10_reg_1521 <= r_V_10_fu_960_p2;
                r_V_11_reg_1526 <= r_V_11_fu_1200_p2;
                rev_reg_1531 <= rev_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_fu_1012_p2 = ap_const_lv1_0) and (exitcond4_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_32_fu_1025_p2 = ap_const_lv1_1))) then
                r_V_13_reg_1555 <= grp_fu_1205_p3;
                tmp_reg_1560 <= tmp_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                r_V_1_reg_1460 <= r_V_1_fu_874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                r_V_5_reg_1455 <= r_V_5_fu_1190_p2;
                tmp_20_reg_1450 <= tmp_20_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                sum_3_reg_1631 <= grp_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp1_reg_1565 <= tmp1_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                tmp_22_reg_1483 <= tmp_22_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1))) then
                tmp_26_reg_1516 <= tmp_26_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tp_reg_1610 <= grp_fu_473_p2;
            end if;
        end if;
    end process;
    lhs_V_2_cast_reg_1298(16) <= '0';
    lhs_V_4_cast_reg_1313(16) <= '0';
    tmp_2_cast1_reg_1328(48 downto 30) <= "0000000000000000000";
    tmp_8_cast_reg_1333(30) <= '0';
    tmp_13_cast_reg_1338(48 downto 30) <= "0000000000000000000";
    tmp_16_cast_reg_1343(47 downto 30) <= "000000000000000000";
    tmp_9_reg_1358(15 downto 8) <= "00000000";
    tmp_s_reg_1363(15 downto 8) <= "00000000";
    tmp_10_reg_1368(15 downto 8) <= "00000000";
    tmp_11_reg_1373(15 downto 8) <= "00000000";
    rhs_V_1_reg_1378(31 downto 16) <= "0000000000000000";
    rhs_V_2_reg_1385(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_cast_reg_1390(15 downto 8) <= "00000000";
    rhs_V_8_cast_reg_1395(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_10_cast_reg_1401(23 downto 16) <= "00000000";
    rhs_V_9_cast_reg_1406(31 downto 16) <= "0000000000000000";
    rhs_V_7_cast_reg_1412(31 downto 16) <= "0000000000000000";
    tmp_17_cast_reg_1425(31 downto 16) <= "0000000000000000";
    gmem_addr_reg_1431(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state29, exitcond3_fu_910_p2, ap_CS_fsm_state59, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state71, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state25, exitcond1_fu_812_p2, ap_CS_fsm_state26, exitcond2_fu_855_p2, ap_CS_fsm_state28, exitcond_fu_889_p2, ap_sig_ioackin_gmem_ARREADY, ap_block_state29_io, ap_CS_fsm_state31, exitcond4_fu_979_p2, brmerge_fu_1012_p2, tmp_32_fu_1025_p2, ap_CS_fsm_state33, exitcond5_fu_1047_p2, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond1_fu_812_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond2_fu_855_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_fu_889_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond4_fu_979_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((brmerge_fu_1012_p2 = ap_const_lv1_0) and (exitcond4_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_32_fu_1025_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond5_fu_1047_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    W4_sum_cast_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W4_sum_fu_1104_p2),64));
    W4_sum_fu_1104_p2 <= std_logic_vector(unsigned(tmp_36_cast_cast_fu_1101_p1) + unsigned(tmp_13_cast_reg_1338));
    Wout_V_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_18_fu_758_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);

    ap_block_state29_io_assign_proc : process(exitcond3_fu_910_p2, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state29_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond3_fu_910_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, exitcond1_fu_812_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond1_fu_812_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, exitcond1_fu_812_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond1_fu_812_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias6_sum_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias6_sum_fu_831_p2),64));
    bias6_sum_fu_831_p2 <= std_logic_vector(unsigned(tmp_17_cast1_fu_823_p1) + unsigned(tmp_8_cast_reg_1333));
    brmerge_fu_1012_p2 <= (tmp_31_fu_1004_p3 or rev_reg_1531);
    cin_fu_1052_p2 <= std_logic_vector(unsigned(i_op_assign_reg_429) + unsigned(ap_const_lv16_1));
    cout_fu_817_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_282) + unsigned(ap_const_lv16_1));
    exitcond1_fu_812_p2 <= "1" when (i_op_assign_s_reg_282 = CHout_V_read_reg_1241) else "0";
    exitcond2_fu_855_p2 <= "1" when (i_op_assign_1_reg_293 = tmp_7_reg_1353) else "0";
    exitcond3_fu_910_p2 <= "1" when (i_op_assign_3_reg_361 = Ky_V_read_reg_1228) else "0";
    exitcond4_fu_979_p2 <= "1" when (i_op_assign_5_reg_396 = Kx_V_read_reg_1234) else "0";
    exitcond5_fu_1047_p2 <= "1" when (i_op_assign_reg_429 = CHin_V_read_reg_1259) else "0";
    exitcond_fu_889_p2 <= "1" when (i_op_assign_2_reg_315 = Wout_V_reg_1348) else "0";
        feature_in2_sum9_cas_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in2_sum9_fu_1067_p2),64));

    feature_in2_sum9_fu_1067_p2 <= std_logic_vector(unsigned(r_V_15_fu_1062_p2) + unsigned(tmp_16_cast_reg_1343));
    feature_out8_sum_cas_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_out8_sum_fu_1122_p2),64));
    feature_out8_sum_fu_1122_p2 <= std_logic_vector(unsigned(tmp_2_cast1_reg_1328) + unsigned(tmp_26_cast_cast_fu_1119_p1));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state29, exitcond3_fu_910_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, gmem_addr_reg_1431, gmem_addr_2_reg_1578, gmem_addr_3_reg_1594, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                gmem_ARADDR <= gmem_addr_3_reg_1594;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                gmem_ARADDR <= gmem_addr_2_reg_1578;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1))) then 
                gmem_ARADDR <= gmem_addr_reg_1431;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state29, exitcond3_fu_910_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state65, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state71, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state41, ap_CS_fsm_state42, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state66, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, exitcond3_fu_910_p2, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond3_fu_910_p2 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1205_p0 <= rhs_V_1_reg_1378(16 - 1 downto 0);

    grp_fu_467_p0_assign_proc : process(sum_reg_349, sum_2_reg_418, ap_CS_fsm_state47, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_467_p0 <= sum_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_467_p0 <= sum_2_reg_418;
        else 
            grp_fu_467_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_467_p1_assign_proc : process(tp_reg_1610, gmem_addr_read_reg_1626, ap_CS_fsm_state47, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_467_p1 <= gmem_addr_read_reg_1626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_467_p1 <= tp_reg_1610;
        else 
            grp_fu_467_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_694_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_694_ap_start <= ap_const_logic_1;
        else 
            grp_fu_694_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_694_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_681_p2),19));

    grp_fu_694_p1 <= grp_fu_694_p10(9 - 1 downto 0);
    grp_fu_694_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V_read_reg_1222),19));

    grp_fu_740_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_740_ap_start <= ap_const_logic_1;
        else 
            grp_fu_740_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_740_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_727_p2),19));

    grp_fu_740_p1 <= grp_fu_740_p10(9 - 1 downto 0);
    grp_fu_740_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V_read_reg_1216),19));
    h_V_fu_925_p2 <= std_logic_vector(unsigned(tmp_20_reg_1450) + unsigned(tmp_27_fu_921_p1));
    i_fu_860_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_293) + unsigned(ap_const_lv16_1));
    ii_fu_915_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_361) + unsigned(ap_const_lv8_1));
    j_fu_894_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_315) + unsigned(ap_const_lv16_1));
    jj_fu_984_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_396) + unsigned(ap_const_lv8_1));
    lhs_V_12_cast_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_17_reg_407),32));
        lhs_V_13_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_fu_925_p2),17));

    lhs_V_2_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_1248),17));
    lhs_V_4_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_V_read_reg_1254),17));
        lhs_V_9_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_994_p2),17));

    next_mul1_fu_846_p2 <= std_logic_vector(unsigned(phi_mul1_reg_304) + unsigned(tmp_9_reg_1358));
    next_mul2_fu_879_p2 <= std_logic_vector(unsigned(phi_mul3_reg_338) + unsigned(tmp_10_reg_1368));
    next_mul3_fu_884_p2 <= std_logic_vector(unsigned(r_V_9_reg_326) + unsigned(rhs_V_9_cast_reg_1406));
    next_mul4_fu_905_p2 <= std_logic_vector(unsigned(r_V_16_reg_372) + unsigned(rhs_V_1_cast_reg_1390));
    next_mul5_fu_974_p2 <= std_logic_vector(unsigned(r_V_17_reg_407) + unsigned(rhs_V_10_cast_reg_1401));
    next_mul_fu_1082_p2 <= std_logic_vector(unsigned(rhs_V_9_cast_reg_1406) + unsigned(r_V_18_reg_440));
    notlhs_fu_1154_p2 <= "0" when (tmp_23_fu_1140_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1160_p2 <= "1" when (tmp_24_fu_1150_p1 = ap_const_lv23_0) else "0";
    p_1_fu_638_p3 <= 
        pad_x_V_fu_572_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_2_fu_646_p3 <= 
        pad_y_V_fu_630_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_neg4_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_2_cast_fu_522_p1));
    p_neg_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(tmp_37_cast_fu_580_p1));
    p_s_fu_1183_p3 <= 
        ap_const_lv32_0 when (r_V_fu_1178_p2(0) = '1') else 
        sum_3_reg_1631;
    pad_x_V_fu_572_p3 <= 
        tmp_6_fu_566_p2 when (tmp_8_fu_532_p3(0) = '1') else 
        tmp_12_fu_556_p4;
    pad_y_V_fu_630_p3 <= 
        tmp_16_fu_624_p2 when (tmp_13_fu_590_p3(0) = '1') else 
        tmp_15_fu_614_p4;
    r_V_10_fu_960_p0 <= r_V_14_reg_1506;
    r_V_10_fu_960_p1 <= rhs_V_2_reg_1385(16 - 1 downto 0);
    r_V_10_fu_960_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_10_fu_960_p0) * signed('0' &r_V_10_fu_960_p1))), 48));
    r_V_11_fu_1200_p0 <= r_V_11_fu_1200_p00(16 - 1 downto 0);
    r_V_11_fu_1200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_16_reg_372),32));
    r_V_11_fu_1200_p1 <= rhs_V_1_reg_1378(16 - 1 downto 0);
    r_V_14_fu_1195_p0 <= rhs_V_1_reg_1378(16 - 1 downto 0);
    r_V_15_fu_1062_p2 <= std_logic_vector(unsigned(rhs_V_14_cast_fu_1058_p1) + unsigned(r_V_13_reg_1555));
    r_V_1_fu_874_p0 <= r_V_1_fu_874_p00(32 - 1 downto 0);
    r_V_1_fu_874_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_reg_1455),48));
    r_V_1_fu_874_p1 <= rhs_V_8_cast_reg_1395(16 - 1 downto 0);
    r_V_1_fu_874_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_874_p0) * unsigned(r_V_1_fu_874_p1), 48));
    r_V_1_tr_fu_584_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_37_cast_fu_580_p1));
    r_V_2_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_654_p3),17));
    r_V_2_fu_654_p3 <= (p_1_reg_1286 & ap_const_lv1_0);
    r_V_3_cast_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_668_p2),18));
    r_V_3_fu_668_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_665_p1) + unsigned(r_V_2_cast_fu_661_p1));
    r_V_4_fu_681_p2 <= std_logic_vector(unsigned(r_V_3_cast_fu_674_p1) - unsigned(rhs_V_2_cast_fu_678_p1));
    r_V_5_fu_1190_p0 <= r_V_5_fu_1190_p00(16 - 1 downto 0);
    r_V_5_fu_1190_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_293),32));
    r_V_5_fu_1190_p1 <= rhs_V_7_cast_reg_1412(16 - 1 downto 0);
    r_V_6_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_700_p3),17));
    r_V_6_fu_700_p3 <= (p_2_reg_1292 & ap_const_lv1_0);
    r_V_7_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_7_fu_714_p2),18));
    r_V_7_fu_714_p2 <= std_logic_vector(unsigned(lhs_V_4_cast_fu_711_p1) + unsigned(r_V_6_cast_fu_707_p1));
    r_V_8_fu_727_p2 <= std_logic_vector(unsigned(r_V_7_cast_fu_720_p1) - unsigned(rhs_V_5_cast_fu_724_p1));
    r_V_fu_1178_p2 <= (rhs_V_fu_1172_p2 and relu_en_V_read_reg_1211);
    r_V_tr_fu_526_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(tmp_2_cast_fu_522_p1));
    rev_fu_969_p2 <= (slt_reg_1511 xor ap_const_lv1_1);
    rhs_V_10_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_1259),24));
    rhs_V_14_cast_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_429),48));
    rhs_V_1_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_1234),16));
    rhs_V_1_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_1259),32));
    rhs_V_2_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_1234),18));
    rhs_V_2_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_1248),48));
    rhs_V_5_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_1228),18));
    rhs_V_7_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_762_p2),32));
    rhs_V_8_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_V_read_reg_1241),48));
    rhs_V_9_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_V_read_reg_1241),32));
    rhs_V_fu_1172_p2 <= (tmp_28_fu_477_p2 and tmp_25_fu_1166_p2);
    slt_fu_938_p2 <= "1" when (signed(lhs_V_13_cast_fu_934_p1) < signed(lhs_V_4_cast_reg_1313)) else "0";
    sum_4_to_int_fu_1137_p1 <= sum_3_reg_1631;
    tmp1_fu_1042_p0 <= tmp1_fu_1042_p00(32 - 1 downto 0);
    tmp1_fu_1042_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1560),48));
    tmp1_fu_1042_p1 <= rhs_V_8_cast_reg_1395(16 - 1 downto 0);
    tmp1_fu_1042_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_1042_p0) * unsigned(tmp1_fu_1042_p1), 48));
    tmp2_cast_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_1087_p2),48));
    tmp2_fu_1087_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1425) + unsigned(r_V_18_reg_440));
    tmp3_cast_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_943_p2),48));
    tmp3_fu_943_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1425) + unsigned(r_V_9_reg_326));
    tmp_10_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V_read_reg_1222),16));
    tmp_11_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_1286),16));
    tmp_12_fu_556_p4 <= r_V_tr_fu_526_p2(8 downto 1);
    tmp_13_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1276),49));
    tmp_13_fu_590_p3 <= r_V_1_tr_fu_584_p2(8 downto 8);
    tmp_14_fu_604_p4 <= p_neg_fu_598_p2(8 downto 1);
    tmp_15_fu_614_p4 <= r_V_1_tr_fu_584_p2(8 downto 1);
    tmp_16_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1281),48));
    tmp_16_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_14_fu_604_p4));
    tmp_17_cast1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_s_reg_282),31));
    tmp_17_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_s_reg_282),32));
    tmp_18_fu_758_p1 <= grp_fu_694_p2(16 - 1 downto 0);
    tmp_20_fu_866_p2 <= std_logic_vector(unsigned(phi_mul1_reg_304) - unsigned(tmp_s_reg_1363));
    tmp_21_fu_768_p1 <= grp_fu_740_p2(16 - 1 downto 0);
    tmp_22_fu_900_p2 <= std_logic_vector(unsigned(phi_mul3_reg_338) - unsigned(tmp_11_reg_1373));
    tmp_23_fu_1140_p4 <= sum_4_to_int_fu_1137_p1(30 downto 23);
    tmp_24_fu_1150_p1 <= sum_4_to_int_fu_1137_p1(23 - 1 downto 0);
    tmp_25_fu_1166_p2 <= (notrhs_fu_1160_p2 or notlhs_fu_1154_p2);
    tmp_26_cast_cast_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1516),49));
    tmp_26_fu_952_p2 <= std_logic_vector(unsigned(r_V_1_reg_1460) + unsigned(tmp3_cast_fu_948_p1));
    tmp_27_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_361),16));
    tmp_29_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_5_reg_396),16));
    tmp_2_cast1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1266),49));
    tmp_2_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),9));
    tmp_30_fu_999_p2 <= (w_V_fu_994_p2 or h_V_reg_1501);
    tmp_31_fu_1004_p3 <= tmp_30_fu_999_p2(15 downto 15);
    tmp_32_fu_1025_p2 <= "1" when (signed(lhs_V_9_cast_fu_1021_p1) < signed(lhs_V_2_cast_reg_1298)) else "0";
    tmp_33_fu_1096_p2 <= std_logic_vector(unsigned(tmp1_reg_1565) + unsigned(tmp2_cast_fu_1092_p1));
    tmp_36_cast_cast_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_1589),49));
    tmp_37_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),9));
    tmp_3_fu_546_p4 <= p_neg4_fu_540_p2(8 downto 1);
    tmp_6_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_3_fu_546_p4));
    tmp_7_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_21_fu_768_p1));
    tmp_8_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1271),31));
    tmp_8_fu_532_p3 <= r_V_tr_fu_526_p2(8 downto 8);
    tmp_9_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V_read_reg_1216),16));
    tmp_fu_1034_p2 <= std_logic_vector(unsigned(r_V_11_reg_1526) + unsigned(lhs_V_12_cast_fu_1030_p1));
    tmp_s_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_reg_1292),16));
    w_V_fu_994_p2 <= std_logic_vector(unsigned(tmp_29_fu_990_p1) + unsigned(tmp_22_reg_1483));
end behav;
